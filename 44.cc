#include <iostream>#include <set>#include <stdio.h>#define N (10000)inline long long Norm(long long n){    return (n < 0) ? -n : n;}// -----------------------------------------------------------------------------std::set<long long> pentagonal_set;long long P[N] = {};void InitPentagonalNumbers(){    for (int i = 1; i < N; i++)    {        P[i] = i * (3*i - 1)/2;        pentagonal_set.insert(P[i]);    }}void Solve(){    long long Pu, Pv;    for (int j = 2; j < N; j++)    {        for (int k = j-1; k > 0; k--)        {            Pu = P[j]-P[k];            if (pentagonal_set.find(Pu) != pentagonal_set.end())            {                Pv = Norm(P[k] - Pu);                if (pentagonal_set.find(Pv) != pentagonal_set.end())                {                    std::cout << Pv << std::endl;                    return;                }            }        }    }}int main(int argc, char* argv[]){    InitPentagonalNumbers();    Solve();    return 0;}