#include <algorithm>#include <iostream>#include <vector>#include <stdio.h>// A_F(x) = -x/(x^2 + x - 1)long long GetGoldenNugget(long long n){    // A_F(x) = n <=> nx^2 + (n+1)x - n = 0.    // If x = p/q is a rational number (p and q are coprime), then     // (1) p|n, q|n    // (2) (q-p)|A_F(1), (q+p)|A_F(-1)    std::vector<long long> divisors;    for (long long i = 1; i*i <= n; i++)    {        if (n % i == 0)        {            divisors.push_back(i);            long long j = n/i;            if (j != i)            {                divisors.push_back(n/i);            }        }    }    std::sort(divisors.begin(), divisors.end());    long long sigma = divisors.size();    long long p, q;    for (int i = 0; i < sigma; i++)    {        p = divisors[i];        for (int j = i+1; j < sigma; j++)        {            q = divisors[j];            if (((n+1) % (q-p)) || ((n+1) % (q+p)))            {                continue;            }            if ((n+1)*p*q == n*(q-p)*(q+p))            {                printf("Found: A_F(%lld/%lld) = %lld\n", p, q, n);                return n;            }        }    }    return -1;}// Found: A_F(1/2) = 2// Found: A_F(3/5) = 15// Found: A_F(8/13) = 104// Found: A_F(21/34) = 714// Found: A_F(55/89) = 4895// Found: A_F(144/233) = 33552// Found: A_F(377/610) = 229970void SolveByBruteForce(){    for (long long i = 1; i <= 229970; i++)    {        GetGoldenNugget(i);    }}// -----------------------------------------------------------------------------long long fib[35] = {};// A_F(x) = -x/(x^2 + x - 1)long long A_F(long long i){    return fib[i]*fib[i+1]/(fib[i-1]*fib[i+1] - fib[i]*fib[i]);}void SolveByConjecture(){    fib[0] = 0;    fib[1] = 1;    for (int i = 2; i < 35; i++)    {        fib[i] = fib[i-1] + fib[i-2];    }    for (int i = 0; i < 15; i++)    {        std::cout << A_F(i*2 + 2) << std::endl;    }}int main(int argc, char* argv[]){    SolveByConjecture();    return 0;}