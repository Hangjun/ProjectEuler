#include <iostream>#include <set>#include <stdio.h>// A_G(x) = (-3x^2 - x)/(x^2 + x - 1)long long GetGoldenNugget(long long n){    // A_G(x) = n <=> (n+3) x^2 + (n+1)x - n = 0.    // If x = p/q is a rational number (p and q are coprime), then     // (1) p|n, q|(n+3)    // (2) (q-p)|A_G(1), (q+p)|A_G(-1)    std::set<long long> p_divisors;    std::set<long long> q_divisors;        for (long long i = 1; i*i <= n; i++)    {        if (n % i == 0)        {            p_divisors.insert(i);            long long j = n/i;            if (j != i)            {                p_divisors.insert(n/i);            }        }    }    long long m = n+3;    for (long long i = 1; i*i <= m; i++)    {        if (m % i == 0)        {            q_divisors.insert(i);            long long j = m/i;            if (j != i)            {                q_divisors.insert(m/i);            }        }    }    for (std::set<long long>::iterator p_it = p_divisors.begin();        p_it != p_divisors.end(); p_it++)    {        long long p = *p_it;        for (std::set<long long>::iterator q_it = q_divisors.begin();            q_it != q_divisors.end(); q_it++)        {            long long q = *q_it;            if (q <= p || ((n+4) % (q-p)) || ((n-2) % (q+p)))            {                continue;            }            if ((n+3)*p*p == n*q*q - (n+1)*p*q)            {                printf("Found: A_G(%lld/%lld) = %lld\n", p, q, n);                return n;            }        }    }    return -1;}// Found: A_G(2/5) = 2// Found: A_G(1/2) = 5// Found: A_G(7/12) = 21// Found: A_G(3/5) = 42// Found: A_G(19/31) = 152// Found: A_G(8/13) = 296// Found: A_G(50/81) = 1050// Found: A_G(21/34) = 2037// Found: A_G(131/212) = 7205// Found: A_G(55/89) = 13970void SolveByBruteForce(){    for (long long i = 1; i <= 13970; i++)    {        GetGoldenNugget(i);    }}// -----------------------------------------------------------------------------long long T[32] = {};long long S[32] = {};// A_G(x) = (-3x^2 - x)/(x^2 + x - 1)long long A_G(long long i){    if (i % 2)    {        return S[i-1]*(3*S[i-1] + S[i])/            (S[i]*S[i] - S[i]*S[i-1] - S[i-1]*S[i-1]);    }    else    {        return T[i-2]*(3*T[i-2] + T[i-1])/             (T[i-1]*T[i-1] - T[i-2]*T[i-1] - T[i-2]*T[i-2]);    }    return 0;}void InitFibonacciNumbers(){    T[0] = 1;    T[1] = 2;    for (int i = 2; i < 32; i++)    {        T[i] = T[i-1] + T[i-2];    }    S[0] = 2;    S[1] = 5;    for (int i = 2; i < 32; i++)    {        S[i] = S[i-1] + S[i-2];    }}void SolveByConjecture(){    InitFibonacciNumbers();    long long sum = 0;    for (int i = 1; i <= 30; i++)    {        sum += A_G(i);    }    std::cout << sum << std::endl;}int main(int argc, char* argv[]){    SolveByConjecture();    return 0;}